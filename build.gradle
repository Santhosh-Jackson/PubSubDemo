buildscript {

    dependencies {
        classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '2.6.1'
    }
}

plugins {

    id "java"
    id "maven-publish"
    id "jacoco"
    id 'com.google.cloud.tools.jib' version '3.1.0'
    id 'org.springframework.boot' version '2.6.6'
    id 'org.openapi.generator' version '4.2.1'
    id 'org.sonarqube' version '2.7'
    id 'io.freefair.lombok' version '4.1.6'

}
group = 'com.lbg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = "11"


apply plugin: "kr.motd.sphinx"

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/specs/api-specs.yaml".toString() // specify the API specs
    outputDir = "$buildDir/generated".toString()
    modelPackage = "__PACKAGE_PREFIX__.request"
    configOptions = [
            dateLibrary: "java8"
    ]
    systemProperties = [
            models: "Error,Pet"
    ]
}


switch (System.getProperty('os.name').toLowerCase().split()[0]) {
    case 'osx-aarch_64':
        compileOnly "io.netty:netty-resolver-dns-native-macos:4.1.76.Final:osx-aarch_64"
        break
}

springBoot {
    buildInfo()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


jib {
    // specify the name of docker image to be built
    to.image = "dmn01-rsk-csp-ds-collater-listener:v1"
    to.tags = ["latest"]
    // not required if using secured registry
    allowInsecureRegistries = true
    // specify the exact base image to be used
    from.image = "eu.gcr.io/dmn01-rskctl-bld-01-2fd1/rsk/rsk-csp-ds-collateral-dbt:v0.2.0"
    container.user = "dbt"
}

repositories {
    maven {
        url = "https://nexus.mgmt-bld.oncp.dev/repository/maven-public/"
    }
    maven {
        url = "https://nexus.sbs-bld.oncp.dev/repository/shared-services/"
    }
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/package-name1/**, **/package-name2/**, **/ClassName1.java, **/ClassName2.java"
        property "sonar.jacoco.reportPath", "$projectDir/build/reports/jacoco/test"
        property "sonar.junit.reportsPath", "$projectDir/build/test-results/test"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

configurations.all {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.17.1'
        }
    }
}

def lombok_version = '1.18.22'

dependencies {

    /*
      gradle dependency for the spring.
    */
    def spring_version = '2.6.6'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: spring_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: spring_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: spring_version
    implementation group: 'org.springframework.integration', name: 'spring-integration-core', version: '5.5.13'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-pubsub', version: '1.2.7.RELEASE'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-dependencies', version: '1.2.7.RELEASE', ext:'pom'
//    implementation group: 'org.springframework.cloud', name:'spring-cloud-gcp-starter-sql-postgresql', version: '1.2.7.RELEASE'

    implementation("org.springframework.security:spring-security-core"){
        version {
            strictly '5.6.4'
        }
    }

    implementation("org.yaml:snakeyaml"){
        version {
            strictly '1.31'
        }
    }

    implementation("com.google.code.gson:gson"){
        version {
            strictly '2.8.9'
        }
    }


    /*
      gradle dependency for the flogger api.
    */
    implementation group: 'com.google.flogger', name: 'flogger', version: '0.5.1'
    implementation group: 'com.google.flogger', name: 'flogger-system-backend', version: '0.5.1'
    implementation group: 'com.google.flogger', name: 'flogger-slf4j-backend', version: '0.5.1'

    /*
      gradle dependency for the lombok.
    */
    implementation "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    /*
      gradle dependency for the swagger2
    */
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

    /*
       gradle dependency for the jackson
     */
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.7'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.6'
    implementation group: 'io.projectreactor.netty', name: 'reactor-netty', version: '1.0.18'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'


    switch (System.getProperty('os.name').toLowerCase().split()[0]) {
        case 'osx-aarch_64':
            compileOnly "io.netty:netty-resolver-dns-native-macos:4.1.76.Final:osx-aarch_64"
            break
    }

    // excluding junit-4 from spring-boot
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.6.6') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc', version: '2.0.6.RELEASE'


}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sphinx {
    sourceDirectory = "${projectDir}"
    outputDirectory = "${project.buildDir}/site"
}

test {
    useJUnitPlatform {
        options.includeTags("unittest")
        options.includeTags("smokeTest")
        options.includeTags("component")
    }

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

task componentTest(type: Test) {

    useJUnitPlatform {
        options.includeTags("component")
    }

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
